EXERCISE 3.1 - BINARY TO DECIMAL CONVERSION
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>

int read_binary_value()
{
    int i, bit, value = 0;
    char bit_array[16];
    
    scanf(" %16s", bit_array);                      // Read the 16 bit input
    
    for (i=0; i<16; i++)                            // Loop that calculates the value for each bit in decimal
    {
        value = value * 2 + (bit_array[i] - '0');
        //printf("Value = %i and bit_array = %i in index %i \n", value, bit_array[i], i);
        if (i == 0 && bit_array[0] == '1')
            value = -value;
    }
    return value;
}

void main(void)
{
    int value;

    printf("Enter binary number: ");
    value = read_binary_value();
    printf("Value: %d\n", value);
}


EXERCISE 3.2 - REVERSE CHARACTERS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>
#define SIZE 50

void main(void)
{
    char input[SIZE];               // Initialize the array with length SIZE (16)
    char c;
    int j, i;

    for (i=0; i<SIZE; i++)          // Create a loop that will read each character of the input and put it into the array 'input'
    {
        scanf("%c", &c);            // Scans each character, don't have a space before %c so that it doesn't skip whitespaces
        if (c == '#')
        {
            break;                  // Stop reading the input once it has reached/read '#'
        }
        input[i] = c;               // Input the character into the array 'input'
    }
    
    j = i;                          // Make j = i (the length of the user's input)
    
    for (i=j-1; i>=0; i--)          // Create a loop that starts at the length of the input and decrements to 0
    {
        printf("%c", input[i]);     // Prints each character in reverse order
    }
    printf("\n");                   // Starts a newline once the reverse string is printed
}

%%% ALT CODE %%%

#include <stdio.h>
#define SIZE 50

int main(void)
{
    char sequence[SIZE];
    char c;
    int j, i = 0;
    
    do                              // Use a 'do' loop instead
    {
        scanf("%c", &c);
        sequence[i++] = c;          // Increase the index in the array
    } while(c != '#' && i<SIZE);    // Keep doing the loop as long as the input is not '#' and the index in within the SIZE
    
    for (int j=i-1; j>=0; j--)
    {
        printf("%c", sequence[j]);
    }
}


PROGRAMMING LAB - SORTING
%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>
#define SIZE 10

void printValues(float values[], int size)
{
    printf("Values:");
    
    for (int i=0; i<SIZE; i++)
    {
        if (i != 0)
        {
            printf(",");
        }
        printf(" %.3f", values[i]);
    }
    printf("\n");
}

int findLastIndexOfValue(float values[], int size, float v)
{
    int i;
    int found=0;
    
    for (i = SIZE - 1; i>= 0; i--)
    {
        if (values[i] == v)
        {
            printf("Value found at index %d in array.\n", i);
            found = 1;
            break;
        }
    }
    
    if (found == 0)
    {
        printf("Value not found in array!\n");
    }
}

float maxElement(float values[], int size)
{
    float max = values[0];
    
    for (int i=0; i<SIZE; i++)
    {
        if (values[i] > max)
        {
            max = values[i];
        }
    }
    
    printf("Max: %.3f\n", max);
}

void replaceElement(float values[], int i, float v)
{
    values[i] = v;
}

void sortOnValue(float values[], int size)
{
    float temp;
    int swap;

    do
    {
        swap = 0;
        for (int i=0; i<SIZE-1; i++)
        {
            if (values[i] > values[i+1])
            {
                temp = values[i];
                values[i] = values[i+1];
                values[i+1] = temp;
                swap = 1;
            }
            
        }
    } while (swap != 0);
    return;
}

void main(void)
{
    char command;
    float value;
    int index;

    float val[SIZE] = {1.5, 2.2, 7.3, 9.2, 7.4, 7.5, -8.0, 1.5, 12}; 
    
    do
    {
        printf("Command? ");
        scanf(" %c", &command);
        
        switch(command)
        {
            case 'p':
            printValues(val, SIZE);
            break;
            
            case 'f':
            printf("Find Value: ");
            scanf(" %f", &value);
            findLastIndexOfValue(val, SIZE, value);
            break;
            
            case 'm':
            maxElement(val, 10);
            break;
            
            case 'r':
            do
            {
                printf("Replace (index): ");
                scanf(" %d", &index);
                
                if (index < 0 || index >= SIZE)
                {
                    printf("Error: index exceeds bound of array.\n");
                }
            } while (index < 0 || index >= SIZE);
            
            printf("Replace (value): ");
            scanf(" %f", &value);
            replaceElement(val, index, value);
            break;
            
            case 's':
            sortOnValue(val, SIZE);
            break;
            
        }
        
    } while (command != 'q');
    
    return;
    
}
