EXERCISE 7.1 - POSITIVE POWER
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>

/* USING LOOP
int power(int x, int y)
{
    int result = 1;
    if (y == 0)
    {
        return 1;
    }
    
    else
    {
        for (int i=0; i<y; i++)
        {
            result = x * result;
        }
        return result;
    }
}
*/

int power(int x, int y)  // USING RECURSION
{
    if (y == 0) // BASE CASE
    {
        return 1;
    }
    else // RECURSIVE CASE
    {
        return x * power(x, y - 1);
    }
}

void main(void)
{
    int x, y, result;
    
    printf("Base number? ");
    scanf(" %d", &x);
    
    printf("Power number (positive integer): ");
    scanf(" %d", &y);
    
    result = power(x, y);
    
    printf("Result: %d^%d = %d", x, y, result);
}


EXERCISE 7.2 - STRING END COMPARE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>
#include <string.h>

int strend(char s1[], char s2[])
{
    int len1 = strlen(s1);
    int len2 = strlen(s2);
    int marker = len1 - len2;
    
    for (int i = 0; i < len2; i++) 
    {
        if (s1[marker + i] != s2[i])
        {
            return 0;
        }
    }

    return 1;
}

void main(void)
{
    char s1[100];
    char s2[100];
    
    printf("String 1? ");
    scanf(" %[^\n]s", s1);
    printf("String 2? ");
    scanf(" %[^\n]s", s2);
    
    if (strend(s1, s2) == 1)
        printf("'%s' ends with '%s'\n", s1, s2);
    else
        printf("'%s' not at the end of '%s'\n", s2, s1);
        
}


PROGRAMMING LAB - TRAIN STATIONS
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define MAX_NUMBER_STATIONS 5

struct station_t
{
    char *name;
    char *destinations[MAX_NUMBER_STATIONS];
};


void printStations(struct station_t *stations[])
{
    printf("Stations:\n");
    
    for (int i=0; i<MAX_NUMBER_STATIONS; i++)
    {
        if (stations[i] != NULL)
        {
            printf("%s:\n", stations[i]->name);
            
            for (int j=0; j<MAX_NUMBER_STATIONS; j++)
            {
                if (stations[i]->destinations[j] != NULL)
                {
                    printf("- %s\n", stations[i]->destinations[j]);
                }
            }
        }
    }
}


int findStation(struct station_t *stations[], char *name)
{
    for (int i=0; i<MAX_NUMBER_STATIONS; i++)
    {
        if (stations[i] != NULL && strcmp(stations[i]->name, name) == 0)
        {
            return i;
        }
    }
    
    return -1;
}


void addStation(struct station_t *stations[], char *name)
{
    int space = 0;
    int found = findStation(stations, name);
    
    if (found > -1)
    {
        printf("Station '%s' already known.\n", name);
        return;
    }
    
    for (int i=0; i<MAX_NUMBER_STATIONS; i++)
    {
        if (stations[i] == NULL)
        {
            stations[i] = (struct station_t *)malloc(sizeof(struct station_t));
            stations[i]->name = (char *)malloc(strlen(name)+1);
            strcpy(stations[i]->name, name);
            space = 1;
            break;
        }
    }
    
    if (space == 0)
    {
        printf("Station '%s' not added. No space left.\n", name);
    }
}


void addDestination(struct station_t *stations[], char *station1, char *station2)
{
    int index1 = findStation(stations, station1);
    int index2 = findStation(stations, station2);
    
    if (index1 < 0 || index2 < 0)
    {
        printf("Station missing. No destination added.\n");
        return;
    }
    
    for (int i=0; i<MAX_NUMBER_STATIONS; i++)
    {
        if (stations[index1]->destinations[i] == NULL)
        {
            stations[index1]->destinations[i] = (char *)malloc(strlen(station2)+1);
            strcpy(stations[index1]->destinations[i], station2);
            break;
        }
    }
    
    for (int i=0; i<MAX_NUMBER_STATIONS; i++)
    {
        if (stations[index2]->destinations[i] == NULL)
        {
            stations[index2]->destinations[i] = (char *)malloc(strlen(station1)+1);
            strcpy(stations[index2]->destinations[i], station1);
            break;
        }
    }
}


void removeStation(struct station_t *stations[], char *name)
{
    int index = findStation(stations, name);
    
    if (index < 0)
    {
        printf("Station '%s' does not exist.\n", name);
        return;
    }
    
    else
    {
        for (int i=0; i<MAX_NUMBER_STATIONS; i++)
        {
            if (stations[index]->destinations[i] != NULL)
            {
                free(stations[index]->destinations[i]);
                stations[index]->destinations[i] = NULL;
            }
            
            if (stations[i] != NULL)
            {
                for (int j=0; j<MAX_NUMBER_STATIONS; j++)
                {
                    if (stations[i]->destinations[j] != NULL && strcmp(stations[i]->destinations[j], name) == 0)
                    {
                        free(stations[i]->destinations[j]);
                        stations[i]->destinations[j] = NULL;
                    }
                }
            }
        }
        free(stations[index]->name);
        free(stations[index]);
        stations[index] = NULL;
    }
}


int checkStationsConnected(struct station_t *stations[], char *station1, char *station2, int hops)
{
    if (strcmp(station1, station2) == 0)
    {
        return 1;
    }
    
    if (hops == 0)
    {
        return 0;
    }
    
    int index = findStation(stations, station1);
    
    if (index < 0)
    {
        return 0;
    }
    
    for (int i=0; i<MAX_NUMBER_STATIONS; i++)
    {
        if (stations[index]->destinations[i] != NULL && checkStationsConnected(stations, stations[index]->destinations[i], station2, hops - 1))
        {
            return 1;
        }
    }
}


void main(void)
{
    char c;
    struct station_t *stations[MAX_NUMBER_STATIONS] = {NULL};
    char name[100];
    char name2[100];
    
    printf("** Stations **\n");
    do
    {
        printf("Command? ");
        scanf(" %c", &c);
        
        switch(c)
        {
            case 'p':
            printStations(stations);
            break;
            
            case 'a':
            printf("Add station? ");
            scanf(" %[^\n]s", name);
            addStation(stations, name);
            break;
            
            case 'd':
            printf("Add destination.\n");
            printf(" Station1? ");
            scanf(" %[^\n]s", name);
            printf(" Station2? ");
            scanf(" %[^\n]s", name2);
            addDestination(stations, name, name2);
            break;
            
            case 'r':
            printf("Remove station? ");
            scanf(" %[^\n]s", name);
            removeStation(stations, name);
            break;
            
            case 'c':
            printf("Check connection.\n");
            printf(" Station1? ");
            scanf(" %[^\n]s", name);
            printf(" Station2? ");
            scanf(" %[^\n]s", name2);
            int check = checkStationsConnected(stations, name, name2, MAX_NUMBER_STATIONS-1);
            if (check == 1)
            {
                printf("Connected!\n");
            }
            else
            {
                printf("Not connected!\n");
            }
            break;
            
        }
    }
    while (c != 'q');
    for (int i=0; i<MAX_NUMBER_STATIONS; i++)
    {
        if (stations[i] != NULL)
        {
            for (int j = 0; j < MAX_NUMBER_STATIONS; j++)
            {
                if (stations[i]->destinations[j] != NULL)
                {
                    free(stations[i]->destinations[j]);
                }
            }
            free(stations[i]->name);
            free(stations[i]);
        }
    }
}
