EXERCISE 6.2 - DAYS BETWEEN DATES
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>

struct date_t 
{
    int day;
    int month;
    int year;
};

void main(void) 
{
    // Declare variables to store two dates
    struct date_t date1, date2;
    int days = 0;
    //int difference;
    int months[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
    
    // Input details for the first date
    printf("Date 1 (day month year): ");
    scanf("%d %d %d", &date1.day, &date1.month, &date1.year);

    // Input details for the second date
    printf("Date 2 (day month year): ");
    scanf("%d %d %d", &date2.day, &date2.month, &date2.year);

    // Calculate the difference in days between the two dates
    // Put your own code here
    date1.month--;
    for (int i=date1.day; i<months[date1.month-1]; i++)
    {
        days++;
        printf("Days so far: %i (index %i)\n", days, i);
    }
    date1.month++;

    for (int j=date1.month; j<12; j++)
    {
        days = days + months[j];
        printf("Days so far: %i (index %i)\n", days, j);
    }
    date1.year++;
    days = days + (date2.year - date1.year)*365;
    
    for (int k=0; k<date2.day; k++)
    {
        days++;
        printf("Days so far: %i (index %i)\n", days, k);
    }
    
    for (int l=0; l<date2.month; l++)
    {
        days = days + months[l];
        printf("Days so far: %i (index %i)\n", days, l);
    }



PROGRAMMING LAB - DELIVERY ROUTE
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#define MAX_NR_PACKAGES_ON_ROUTE 5

struct package_t
{
    float loc_x;
    float loc_y;
    char *label;
};


void printRoute(struct package_t *route[])
{
    printf("Route:\n");
    
    for (int i=0; i<MAX_NR_PACKAGES_ON_ROUTE; i++)
    {
        if (route[i] != NULL)
        {
            printf("%s: %.1f, %.1f\n", route[i]->label, route[i]->loc_x, route[i]->loc_y);
        }
    }
}


void addPackage(struct package_t *route[], float x, float y, char *label)
{
    int space = 0;
    
    for (int i=0; i<MAX_NR_PACKAGES_ON_ROUTE; i++)
    {
        if (route[i] == NULL)
        {
            route[i] = (struct package_t *)malloc(sizeof(struct package_t));
            route[i]->label = (char *)malloc(strlen(label)+1);
            strcpy(route[i]->label, label);
            route[i]->loc_x = x;
            route[i]->loc_y = y;
            space = 1;
            break;
        }
    }
    
    if (space == 0)
    {
        printf("Package not added. Route is full!\n");
    }
    
}


int findPackage(struct package_t *route[], char *label)
{
    for (int i=0; i<MAX_NR_PACKAGES_ON_ROUTE; i++)
    {
        if (route[i] != NULL && strcmp(route[i]->label, label) == 0)
        {
            return i;
        }
    }
    return -1;
}



void removePackage(struct package_t *route[], char *label)
{
    int index = findPackage(route, label);
    
    if (index != -1)
    {
        free(route[index]->label);
        free(route[index]);
        route[index] = NULL;
    }
}


void swapPackages(struct package_t *route[], int p1, int p2)
{
    if (route[p1] != NULL && route[p2] != NULL)
    {
        struct package_t *temp = route[p1];
        route[p1] = route[p2];
        route[p2] = temp;
    }
}

float computeDistanceBetweenLocations(struct package_t *a, struct package_t *b)
{
    if (a != NULL && b != NULL)
    {
        float distance = sqrt((a->loc_x - b->loc_x)*(a->loc_x - b->loc_x) + (a->loc_y - b->loc_y)*(a->loc_y - b->loc_y));
        return distance;
    }
    
    return -1;
}


float computeDistanceOfRoute(struct package_t *route[])
{
    
    float distance = 0;
    struct package_t origin = {0, 0, "Origin"};
    
    if (route[0] != NULL)
    {
        distance = computeDistanceBetweenLocations(&origin, route[0]);
    }
    
    for (int i=0; i<MAX_NR_PACKAGES_ON_ROUTE-1; i++)
    {
        if (route[i] != NULL && route[i+1] != NULL)
        {
            distance += computeDistanceBetweenLocations(route[i], route[i+1]);
        }
    }
    return distance;
}


void orderPackagesOnDistanceOfRoute(struct package_t *route[])
{
    int sorted;
    struct package_t origin = {0, 0, "Origin"};
    
    do
    {
        sorted = 0;
        for (int i=0; i<MAX_NR_PACKAGES_ON_ROUTE-1; i++)
        {
            if (route[i] != NULL && route[i+1] != NULL)
            {
                float distance1 = computeDistanceBetweenLocations(&origin, route[i]);
                float distance2 = computeDistanceBetweenLocations(&origin, route[i+1]);
                
                if (distance1 > distance2)
                {
                    swapPackages(route, i, i+1);
                    sorted = 1;
                }
            }
        }
    }
    while (sorted != 0);
}


void main(void)
{
    char c;
    struct package_t *route[MAX_NR_PACKAGES_ON_ROUTE] = {NULL};
    char label[100];
    char label2[100];
    float x, y;
    int index, index2;
    
    printf("** Delivery route **\n");
    
    do
    {
        printf("Command? ");
        scanf(" %c", &c);
        
        switch(c)
        {
            case 'p':
            printRoute(route);
            break;
            
            case 'a':
            printf("Add package\n");
            printf("Coordinate x y? ");
            scanf(" %f %f", &x, &y);
            printf("Label? ");
            scanf(" %[^\n]s", label);
            addPackage(route, x, y, label);
            break;
            
            case 'r':
            printf("Remove package\n");
            printf("Label? ");
            scanf(" %[^\n]s", label);
            removePackage(route, label);
            break;
            
            case 's':
            printf("Swap packages\n");
            do
            {
                printf("Label 1? ");
                scanf(" %[^\n]s", label);
                index = findPackage(route, label);
            }
            while (index == -1);
            do
            {
                printf("Label 2? ");
                scanf(" %[^\n]s", label2);
                index2 = findPackage(route, label2);
            }
            while (index2 == -1);
            swapPackages(route, index, index2);
            break;
            
            case 'd':
            printf("Distance: %.1f\n", computeDistanceOfRoute(route));
            break;
            
            case 'o':
            printf("Order route\n");
            orderPackagesOnDistanceOfRoute(route);
            break;
            
            case 'm':
            struct package_t p1 = {0, 0, "Point A"};
            struct package_t p2 = {3, 4, "Point B"};
            printf("Distance: %.2f\n", computeDistanceBetweenLocations(&p1, &p2));
            break;
            
        }
        
    }
    while (c != 'q');
    
    for (int i=0; i<MAX_NR_PACKAGES_ON_ROUTE; i++)
    {
        if (route[i] != NULL)
        {
            free(route[i]->label);
            free(route[i]);
        }
    }
}
